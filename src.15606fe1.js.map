{"version":3,"sources":["index.js"],"names":["mainSectionContainer","document","querySelector","settings","BASE_URL","API_KEY","IMG_URL","TRENDING_URL","GENRES_URL","fetchResults","response","fetch","url","result","json","error","console","log","getImgPath","imgPath","noImg","renderFilms","films","genres","results","markup","map","poster_path","title","genre_ids","getGenres","join","innerHTML","newArr","arg","includes","Number","id","push","name","length","splice","window","addEventListener"],"mappings":";;;AA4EC,aA5ED,IAAA,EAAA,EAAA,QAAA,uCA4EC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA3ED,MAAMA,EAAuBC,SAASC,cAAe,4BAC/CC,EAAW,CACfC,SAAW,gCACXC,QAAU,mCACVC,QAAS,mCACTC,aAAc,qBACdC,WAAa,qBAITC,EAAe,MAAA,IAChB,IACKC,MAAAA,QAAiBC,SAASR,EAASC,WAAWQ,aAAeT,EAASE,WAErEQ,aADcH,EAASI,OAE7B,MAAOC,GACRC,QAAQC,IAAI,QAASF,KAGnBG,EAAaC,GAAaA,KAA0BhB,EAASG,UAAUa,OAAhCC,EAAM,UAQnD,SAASC,EAAYC,EAAMC,GACzBP,QAAQC,IAAIK,EAAME,SAGpBR,QAAQC,IAAIM,GACJE,MAAAA,EAASH,EAAME,QAAQE,IAAI,EAAEC,YAAAA,EAAaC,MAAAA,EAAOC,UAAAA,gEACxBX,EAAWS,uEAEZC,wCACCE,EAAUP,EAAQM,iCAG7CE,KAAK,IAOT/B,EAAqBgC,oCAAsCP,SAK7D,SAASK,EAAUP,EAAQM,GACnBI,MAAAA,EAAS,GAEV,IAAA,MAAMC,KAAOX,EAAOA,OAAO,CACjBM,EAAUM,SAASC,OAAOF,EAAIG,MAEzCJ,EAAOK,KAAKJ,EAAIK,MAIjBN,OAAAA,EAAOO,QAAU,EACXP,EAAOF,KAAK,OACnBE,EAAOQ,OAAO,EAAG,GAAI,SAChBR,EAAOF,KAAK,OA3CrBW,OAAOC,iBAAiB,OAAQ,UAG9BtB,QAFoBZ,EAAaN,EAASI,oBACrBE,EAAaN,EAASK","file":"src.15606fe1.js","sourceRoot":"../src","sourcesContent":["import noImg from '../src/images/noImageAvailable.jpg';\nconst mainSectionContainer = document.querySelector(`[data-id=main-container]`)\nconst settings = {\n  BASE_URL : 'https://api.themoviedb.org/3/',\n  API_KEY : '70fc5b973179caa818ae6622551a44d1',\n  IMG_URL: 'https://image.tmdb.org/t/p/w500/',\n  TRENDING_URL:`trending/movie/day`,\n  GENRES_URL: `/genre/movie/list`,\n}\n\n\nconst fetchResults = async(url) =>{\n  try{\n    const response = await fetch(`${settings.BASE_URL}${url}?api_key=${settings.API_KEY}`);\n    const result = await response.json();\n    return result\n  }  catch (error) {\n    console.log(\"Error\", error)\n  }\n}\nconst getImgPath = imgPath => (!imgPath ? `${noImg}` : `${settings.IMG_URL}${imgPath}`);\n\nwindow.addEventListener('load', async () => {\n  const films = await fetchResults(settings.TRENDING_URL)\n  const genres = await fetchResults(settings.GENRES_URL)\n  renderFilms(films,genres)\n});\n\nfunction renderFilms(films,genres){\n  console.log(films.results)\n\n\nconsole.log(genres)\n  const markup = films.results.map(({poster_path, title, genre_ids}) => `<li class='main__item'>\n    <img class='main__img' src=${getImgPath(poster_path)}>\n      <div class='block__text'>\n        <p class='text__name'>${title}</p>\n        <p class='text__info'>${ getGenres(genres, genre_ids)}</p>\n      </div>\n  </li>`\n    ).join(\"\");\n  // const markupG = films.results.map((gengeItem) => gengeItem.genre_ids)\n  // console.log(markupG)\n\n  // const resultG = for()ifgetGenres(genres).includes(markupG)\n  // console.log(resultG)\n\n  mainSectionContainer.innerHTML = `<ul class='main__list'>${markup}</ul>`\n\n\n\n}\nfunction getGenres(genres, genre_ids){\n  const newArr = [];\n\n  for( const arg of genres.genres){\n    const incl = genre_ids.includes(Number(arg.id))\n    if(incl){\n      newArr.push(arg.name)\n    }\n  }\n\n  if(newArr.length <= 2){\n    return newArr.join(\", \")\n  } newArr.splice(2, 10, \"Other\")\n  return newArr.join(\", \")\n\n\n  // const markGenres = genres.genres.map(genre => {\n//      if(genre_ids.includes(Number(genre.id))){\n//        return genre.name\n//      }\n//   }).filter(item => item)\n// console.log(markGenres)\n// return markGenres\n\n}\n"]}